{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/Profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/Navbar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/FormTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/Home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/FormTextArea.tsx","app/common/form/FormSelectInput.tsx","app/common/form/FormDateInput.tsx","app/common/options/categoryOptions.tsx","features/activities/Form/ActivityForm.tsx","features/About/MyCard.tsx","features/About/WhyComponent.tsx","features/About/AboutPage.tsx","features/activities/Details/ActivityDetailedChat.tsx","features/activities/Details/ActivityDetailedHeader.tsx","features/activities/Details/ActivityDetailedInfo.tsx","features/activities/Details/ActivityDetailedSideBar.tsx","features/activities/Details/ActivitiesDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTopp.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","ProfileStor","commentStore","commnets","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comments","createdAt","comment","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","icon","inverted","secondary","fixed","Container","Image","as","NavLink","to","exact","header","style","marginTop","marginBottom","width","marginRight","src","alt","Item","position","size","avatar","spaced","Dropdown","styles","color","pointing","text","Link","onClick","vertical","Header","attached","active","has","onChange","Reveal","animated","Content","visible","Button","fluid","collor","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","borderColor","borderWidth","boxShadow","List","horizontal","map","Popup","hoverable","trigger","bordered","circular","ActivityListItem","Segment","Group","Label","conent","textAlign","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalItems","initialLoad","Loader","FormTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","positive","ValidationErrors","Message","i","validationSchema","Yup","required","isValid","dirty","HomePage","outline","LoadingComponent","Dimmer","FormTextArea","FormSelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","FormDateInput","selected","categoryOptions","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","placeholderText","showTimeSelect","timeCaption","timeFormat","dateFormat","MyCard","wrapped","ui","Meta","WhyComponent","Divider","AboutPage","align","float","border","resetForm","rows","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","ActivityDetailedSideBar","TestErrors","widths","baseUrl","err","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","disable","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","widescreen","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","ActivityDashboard","ActivitiesDetails","ActivityForm","profilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4e349a24.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","// Here we are centrelize the api connections via axios.\r\nimport axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/Profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\n/*\r\n\r\n            NOTE!! THIS TS.script is for the API requests and responses\r\n            from the API BACKEND. Axios is used to manage the connection.\r\n\r\n*/\r\n\r\n// We want to have a realistic feel to the app and slow it down.\r\nconst sleep = (delay : number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\n// Hardcoded way to the api backend\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\r\n\r\n// We sending upp a allredy loaded token from localstroage.\r\n// If we update the site the user will otherwise get lost.\r\n// To prevent this we fetch the stored token and then reuse it if we have that user.\r\n// This code ensure that we send a token whit every single requst to the store.\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token){\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n})\r\n\r\n// Axios interseptors, delay on api respond.\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config, headers } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\n// We create a responsebody to take in the data from api response\r\n// Sign the typ. Specify the type of response by addin a <T> and the allso add it\r\n// to the AxiosResponse.\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\n// we sepecify all the CRUD operations we are going to use.\r\n// We add some type safty.\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\n// store our activitys\r\n// This is going to be the base url + this place..\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n    .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\n// Object whit current user and login and register.\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\n// Object to get the users profile\r\nconst Profiles = {\r\n    get: (username:string) => requests.get<Profile>(`/profiles/${username}`),\r\n    // method for upploading the file profile image photo\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos',formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    // Object that sets the main photo of choise\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    // Deletes the photo\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    // Update the profile bio and username\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    // Update the following\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    // List the followings in to profile Followings\r\n    listFollowings: (username:string, predicate: string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    // List all activities inside the events in profiles\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n\r\n\r\n}\r\n\r\n// Create and export the object whit the list of activitys.\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n}\r\n\r\n\r\nexport default agent;\r\n","import { Profile } from \"./Profile\";\r\n// In the Interface we normaly say IActivity in c#\r\n// but not in React for our interface.\r\n// Hello\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername?: string;\r\n    isCancelled?: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees?: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity{\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init)\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?:string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if(activity){\r\n            this.id= activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/Profile\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    } \r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                } \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees?.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/Profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {   \r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\n// This class will store the login info from client. \r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    // We observe all changes.\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    // Check if we are loged in\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    // Login the user\r\n    login = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.Account.login(creds);\r\n            console.log(user)\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Logout the user\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    // Check if token is the same as a stored user.\r\n    getUser = async () => {\r\n        try{\r\n            const user= await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Register new users from modal login.\r\n    register = async (creds: UserFormValues) =>{\r\n        try{\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Helper method to set users image.\r\n    setImage = async (image: string) => {\r\n        if (this.user){\r\n            this.user.image = image;\r\n        }\r\n\r\n    }\r\n\r\n    // helper method to update profile username\r\n    setDisplayName = (name: string) => {\r\n        if(this.user){\r\n            this.user.displayName = name;\r\n        }\r\n    }\r\n\r\n}","import { createContext, useContext } from \"react\"\r\nimport ActivityStore from \"./activityStore\"\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStor from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\n// Interface to store all activitys\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStor;\r\n    commentStore: CommentStore;\r\n}\r\n\r\n// Interface to store all user info\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStor(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\n\r\n// Function to setup a db context to connext for\r\n// centrulizing the data so we can implement it to our component\r\n// insted of passing in throw the component structure.\r\nexport const StoreContext = createContext(store);\r\n\r\n\r\nexport const useStore =() => {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from 'mobx';\r\nimport { ServerError } from '../models/serverError';\r\n\r\n// Collects some common info. \r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    // Get the Token from the localStoreage, prevent to losing the user\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n\r\n        // Observs changes to the stor\r\n        makeAutoObservable(this);\r\n\r\n        // MobX reaction checks if we have a token in our webstorage.\r\n        // if not we remove it.\r\n        reaction(\r\n            ()=> this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                }else{\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // We sets the error.\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    // We sats the token\r\n    setToken = (token: string | null) => {\r\n            this.token = token;\r\n        \r\n    }\r\n\r\n    // Is the app loaded, true.\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null,\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open= true;\r\n        this.modal.body= content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { ChatComment } from \"../models/comment\";\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from \"../../../node_modules/@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    commnets: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity){\r\n            // Connection with url to chat activiyId event\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            \r\n            this.hubConnection.start().catch(error => console.log(\"Error establishing the chat connection: \", error));\r\n            \r\n            // Load the comments in activity\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comments =>{\r\n                        comments.createdAt = new Date(comments.createdAt + 'Z');\r\n                    })\r\n                    this.commnets = comments;\r\n                });\r\n            })\r\n\r\n            // Receive comments in signalR\r\n            this.hubConnection.on('ReceiveComment', (comment : ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    // push to the place in the start of the array\r\n                    this.commnets.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    // Method to stop signalR hub connection\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    // Method to clear all message and stop signalR hub connection\r\n    clearComments = () => {\r\n        this.commnets = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try{\r\n            await this.hubConnection?.invoke(\"SendComment\", values);\r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import React, { Fragment } from 'react'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Container, Menu, Image, Dropdown } from 'semantic-ui-react'\r\nimport { useStore } from '../stores/store';\r\n\r\nconst Navbar = () => {\r\n    // need to use a abserver becouse we need to know if a user has\r\n    // been updated to the store.\r\n    const { userStore: {user, logout, isLoggedIn} } = useStore();\r\n    return (\r\n        <Menu\r\n            icon='labeled' \r\n            inverted secondary\r\n            fixed='top'>\r\n            <Container>\r\n                <Image \r\n                    as={NavLink} to='/' exact header style={{marginTop: '5px',marginBottom: '5px',width:'80px', marginRight:'80px'}}\r\n                    src='/assets/imonit3.png' alt='logo' \r\n                />\r\n                {isLoggedIn ? (\r\n                    <Fragment>\r\n\r\n                    <Menu.Item icon='compass' as={NavLink} to='/activities' name='Activities'/>\r\n                <Menu.Item icon='react' \r\n                as={NavLink} to='/createActivity'\r\n                name='Create Activity'\r\n                >\r\n                </Menu.Item>\r\n                <Menu.Item icon='question' as={NavLink} to='/about' name='About' />\r\n                <Menu.Item icon='bug' as={NavLink} to='/errors' name='Errors'/>\r\n                <Menu.Item position='right' >\r\n                    <Image \r\n                        size='tiny'\r\n                        src={user?.image || '/assets/user.png'} \r\n                        avatar spaced='right'\r\n                        alt=\"No image\"\r\n                        />\r\n                </Menu.Item>\r\n                <Dropdown\r\n                    styles={{color:'white'}}\r\n                    pointing='top left' \r\n                    text={user?.displayName}\r\n                    icon='arrow alternate circle down outline'\r\n                >\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item \r\n                        as={Link} \r\n                        to={`/profiles/${user?.username}`} \r\n                        text='My Profile' icon='user' />\r\n                        <Dropdown.Item \r\n                            onClick={logout} \r\n                            text='logout'\r\n                            icon='power'\r\n                            />\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                            </Fragment>\r\n                ) : (<Menu.Item icon='question' as={NavLink} to='/about' name='About' />)\r\n\r\n                        }\r\n            </Container>\r\n        </Menu>\r\n    )\r\n}\r\n// OBS! Observer.\r\nexport default observer(Navbar)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { Fragment } from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nconst ActivityFilters = () => {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <Fragment>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activites' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}    \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                 onChange={(date: Date) => setPredicate('startDate', date)}\r\n                 value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityFilters)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { Fragment, SyntheticEvent } from 'react'\r\nimport { Reveal, Button } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/Profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nconst FollowButton = ({profile} : Props) => {\r\n\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loadingFollowings } = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username){\r\n        return null;\r\n    }\r\n\r\n    const handleFollow = (e: SyntheticEvent, username:string) => {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) :\r\n        updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Reveal animated='move'>\r\n                    <Reveal.Content visible style={{width: '100%'}}>\r\n                        <Button \r\n                            fluid \r\n                            collor='teal' \r\n                            content={profile.following ? 'Following' : 'Not following'} />\r\n                    </Reveal.Content>\r\n                    <Reveal.Content hidden style={{width: '100%'}}>\r\n                        <Button \r\n                            fluid \r\n                            basic\r\n                            color={profile.following ? 'red' : 'green'} \r\n                            content={profile.following ? 'Unfollow' : 'Follow'}\r\n                            loading={loadingFollowings} \r\n                            onClick={(e) => handleFollow(e, profile.username)}\r\n                        />\r\n                    </Reveal.Content>\r\n                </Reveal>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(FollowButton)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/Profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nconst ProfileCard = ({profile}: Props) => {\r\n\r\n    // Truncate so we dont can print whit no end.\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n            <Card as={Link} to={`/profiles/${profile.username}`}>\r\n                <Image src={profile.image || '/assets/user.png'}></Image>\r\n                <Card.Content>\r\n                    <Card.Header>{profile.displayName}</Card.Header>\r\n                    <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Icon name='user'> {profile.followersCount} Followers</Icon>\r\n                </Card.Content>\r\n                <FollowButton profile={profile}/>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileCard)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Image, List, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/Profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nconst ActivityListItemAttendee = ({attendees} : Props) => {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2,\r\n        boxShadow: '2px 2px 5px black'\r\n    \r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n            <Popup \r\n                hoverable\r\n                key={attendee.username}\r\n                trigger={\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                        <Image \r\n                            style={attendee.following ? styles : null} \r\n                            bordered\r\n                            size='mini' \r\n                            circular src={attendee.image || '/assets/user.png' }/>\r\n                    </List.Item>\r\n                }>\r\n                <Popup.Content>\r\n                    <ProfileCard profile={attendee}/>\r\n                </Popup.Content>\r\n            </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityListItemAttendee)\r\n","import { format } from 'date-fns';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nconst ActivityListItem = ({activity}: Props) => {\r\n    return (\r\n     <Segment.Group>\r\n         <Segment>\r\n             {activity.isCancelled && \r\n                <Label \r\n                    attached=\"top\" \r\n                    color='red' \r\n                    conent='Cancelled' \r\n                    style={{textAlign: 'center'}}>Cancelled\r\n                </Label>}\r\n             <Item.Group>\r\n                 <Item>\r\n                     <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image} />\r\n                     <Item.Content>\r\n                         <Item.Header as={Link} to={`/acticities/${activity.id}`}>\r\n                            {activity.title}\r\n                         </Item.Header>\r\n                         <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                         {activity.isHost ? (\r\n                             <Item.Description >\r\n                                <Label basic color='orange' >\r\n                                    You are hosting the activity.\r\n                                </Label>\r\n                            </Item.Description>\r\n                            ) : activity.isGoing && !activity.isHost && (\r\n                                <Item.Description >\r\n                                    <Label basic color='green' >\r\n                                        You are going to this activity.\r\n                                    </Label>\r\n                                </Item.Description>\r\n                                ) } \r\n                     </Item.Content>\r\n                 </Item>\r\n             </Item.Group>\r\n         </Segment>\r\n         <Segment>\r\n             <span>\r\n                 <Icon name= 'clock'></Icon> {format(activity.date!, 'dd MMM yyyy H:mm')}\r\n                 <Icon name='marker'></Icon> {activity.venue}\r\n             </span>\r\n         </Segment>\r\n         <Segment secondary>\r\n            <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n         </Segment>\r\n         <Segment clearing>\r\n             <span>{activity.description}</span>\r\n             <Button \r\n                as={Link} \r\n                to={`/activities/${activity.id}`} \r\n                color='teal' \r\n                floated='right' \r\n                content='View'/>\r\n         </Segment>\r\n     </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default ActivityListItem\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react'\r\nimport { Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nconst ActivityList = () => {\r\n    const { activityStore } = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    // Group activites by date in the card. map over the groups, \r\n    // then map over activity.\r\n    return (\r\n        <Fragment>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                        {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity}/>\r\n                        ))}\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n    )\r\n}\r\nexport default observer(ActivityList)","import React, { Fragment } from 'react'\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nconst ActivityListItemPlaceholder = () => {\r\n    return (\r\n        <Fragment>\r\n        <Placeholder fluid style={{ marginTop: 25 }}>\r\n            <Segment.Group>\r\n                <Segment style={{ minHeight: 110 }}>\r\n                    <Placeholder>\r\n                        <Placeholder.Header image>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder.Header>\r\n                        <Placeholder.Paragraph>\r\n                            <Placeholder.Line />\r\n                        </Placeholder.Paragraph>\r\n                    </Placeholder>\r\n                </Segment>\r\n                <Segment>\r\n                    <Placeholder>\r\n                        <Placeholder.Line />\r\n                        <Placeholder.Line />\r\n                    </Placeholder>\r\n                </Segment>\r\n                <Segment secondary style={{ minHeight: 70 }} />\r\n                <Segment clearing>\r\n                    <Button disabled color='blue' floated='right' content='View' />\r\n                </Segment>\r\n            </Segment.Group>\r\n        </Placeholder>\r\n    </Fragment>\r\n    )\r\n}\r\n\r\nexport default ActivityListItemPlaceholder\r\n    ","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment, useEffect, useState } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\nconst ActivityDashboard = () => {\r\n\r\n        const { activityStore } = useStore()\r\n        const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n        const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n        function handleGetNext() {\r\n            setLoadingNext(true);\r\n            //console.log(\"totalpages:\" + pagination?.totalPages + \" titalItems:\" + pagination?.totalItems + \" currentPage:\" + pagination?.currentPage)\r\n            setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n            loadActivities().then(() => setLoadingNext(false));\r\n        }\r\n\r\n        // Use Effect whit axios get of api data. Whit the useEffect we get it one time\r\n        // insted of a infinitive loop from only the state hook.\r\n        // Via the interface we can set the type to Activity[] array.\r\n        useEffect(() => {\r\n          if (activityRegistry.size <= 1) loadActivities();\r\n        }, [activityRegistry.size, loadActivities])\r\n      \r\n        // We check if we are loading before going to the jsx content.\r\n        //InfiniteScroll hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n        \r\n        return (\r\n            <Grid>\r\n                <Grid.Column width='10' >\r\n                    {activityStore.loadingInitial && !loadingNext ? (\r\n                        <Fragment>\r\n                            <ActivityListItemPlaceholder />\r\n                            <ActivityListItemPlaceholder />\r\n                        </Fragment>\r\n                        ) : (\r\n                         <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalItems -2}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                        )}\r\n                </Grid.Column>\r\n                <Grid.Column width='6'>\r\n                    <ActivityFilters />\r\n                </Grid.Column>\r\n                <Grid.Column\r\n                    width='10'>\r\n                        <Loader active={loadingNext}/>\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDashboard)\r\n","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n// From the doc of FORMIK package\r\n\r\n// create a interface whit input form props\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string; \r\n    label?: string;\r\n}\r\n\r\n// Component that gives us a reuseable input text field.\r\nconst FormTextInput = (props: Props) => {\r\n    \r\n    // Then we use the hook useField \r\n    const [field, meta] = useField(props.name);\r\n\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n                ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default FormTextInput\r\n","import React, { Fragment } from 'react'\r\nimport { ErrorMessage, Form, Formik } from 'formik'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport FormTextInput from '../../app/common/form/FormTextInput'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nconst LoginForm = () => {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n    <Fragment>\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values)\r\n            .catch(error => setErrors({error: \"invalid email or password\"}))}\r\n            >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h3' content='Login to Imonit Reactivities' color='teal' textAlign='center' />\r\n                    <FormTextInput name='email' placeholder='Email'/>\r\n                    <FormTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage \r\n                        name='error' \r\n                        render={() => <Label style={{ marginBottom: 10 }} \r\n                        basic color='red' \r\n                        content={errors.error}/>} />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>)}\r\n        </Formik>\r\n    </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(LoginForm)\r\n","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\n//cheating by useing any.. the also specify i: any when maping.\r\ninterface Props{\r\n    errors: any;\r\n}\r\n\r\nconst ValidationErrors = ({errors}: Props) => {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((error: any, i: any) => (\r\n                        <Message.Item key={i}>{error}</Message.Item>))}\r\n                </Message.List>)}\r\n        </Message>\r\n    )\r\n}\r\n\r\nexport default ValidationErrors\r\n","import React, { Fragment } from 'react'\r\nimport { ErrorMessage, Form, Formik } from 'formik'\r\nimport { Button, Header } from 'semantic-ui-react'\r\nimport FormTextInput from '../../app/common/form/FormTextInput'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useStore } from '../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors'\r\n\r\nconst RegisterForm = () => {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n    <Fragment>\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null || undefined}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values)\r\n            .catch(error => setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n            >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h3' content='Sign up to Imonit Reactivities' color='teal' textAlign='center' />\r\n                    <FormTextInput name='displayName' placeholder='Display Name'/>\r\n                    <FormTextInput name='username' placeholder='Username'/>\r\n                    <FormTextInput name='email' placeholder='Email'/>\r\n                    <FormTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage \r\n                        name='error' \r\n                        render={() => <ValidationErrors errors={errors.error} />} />\r\n                    <Button\r\n                        disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} \r\n                        positive content='Register' \r\n                        type='submit' \r\n                        fluid />\r\n                </Form>)}\r\n        </Formik>\r\n    </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(RegisterForm)\r\n","import React, { Fragment } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { Container, Header, Segment,Image, Button, Icon, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nconst HomePage = () => {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment textAlign='center' vertical className='masthead'>\r\n                    <Menu outline secondary fixed='top'>\r\n                        <Button style={{marginTop: '10px'}} animated position='right' inverted icon='question' as={NavLink} to='/about' name='About'>\r\n                            <Button.Content visible>\r\n                                <span><Icon name='question' /></span>About\r\n                            </Button.Content>\r\n                                <Button.Content hidden>\r\n                                    <Icon name='arrow right' content='About'/>\r\n                                </Button.Content>\r\n                        </Button>\r\n                    </Menu>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/imonit3.png' alt='logo' style={{marginBottom: 22, marginTop: 22, width: '210px'}} />\r\n                    Imonit<span><Icon name='compass'/></span>\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <Fragment>\r\n                        <Header as='h2' inverted content='Welcome to Imonit activity!'/>\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </Fragment>\r\n                ) : (\r\n                    <Fragment>\r\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                        Login!\r\n                    </Button>\r\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                    Register!\r\n                    </Button>\r\n                    </Fragment>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React from 'react'\r\n// Dimmer is a loading animation for a normal use.\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\n// interface for loading text.\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\n// Component that loads on a delay when fetching data.  \r\nconst LoadingComponent = ({inverted = true, content = 'Loading...'}: Props) => {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default LoadingComponent\r\n","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n// From the doc of FORMIK package\r\n\r\n// create a interface whit input form props\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    rows?: number;\r\n    label?: string;\r\n}\r\n\r\n// Component that gives us a reuseable input text field.\r\nconst FormTextArea = (props: Props) => {\r\n    \r\n    // Then we use the hook useField \r\n    const [field, meta] = useField(props.name)\r\n\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n                ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default FormTextArea\r\n","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nconst FormSelectInput = (props: Props) => {\r\n    const [field, meta, helpers] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            \r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default FormSelectInput","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react'\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\r\n// From the doc of FORMIK package\r\n\r\n// Component that gives us a reuseable input text field.\r\nconst FormDateInput = (props: Partial<ReactDatePickerProps>) => {\r\n    \r\n    // Then we use the hook useField \r\n    const [field, meta, helpers] = useField(props.name!)\r\n\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n                ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default FormDateInput\r\n","export const categoryOptions = [\r\n    {text: 'Travel', value: 'travel'},\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Friends', value: 'friends'},\r\n    {text: 'Convent', value: 'convent'},\r\n    {text: 'Meeting', value: 'meeting'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {value: 'camping', text: 'Camping'},\r\n]","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState} from 'react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Button, Header, Segment } from 'semantic-ui-react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\n//import { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport FormTextInput from '../../../app/common/form/FormTextInput';\r\nimport FormTextArea from '../../../app/common/form/FormTextArea';\r\nimport FormSelectInput from '../../../app/common/form/FormSelectInput';\r\nimport FormDateInput from '../../../app/common/form/FormDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\n\r\n\r\n    const ActivityForm = () => {\r\n\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, \r\n         loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{id:string}>();\r\n\r\n    // Initial state values..\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required.'),\r\n        description: Yup.string().required('The activity description is required.'),\r\n        category: Yup.string().required('The activity category is requierd.'),\r\n        date: Yup.string().required('The activity date is required.').nullable(),\r\n        city: Yup.string().required('The activity city is required.'),\r\n        venue: Yup.string().required('The activity venue is required.')\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n  \r\n    /*\r\n    */\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n    \r\n    if(loadingInitial) return <LoadingComponent content='Loading activity...'/>\r\n\r\n    // Formik enableReinitialize, collects the previus data from useState when editing.\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal'/>\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <FormTextInput name='title' placeholder='Title' />\r\n                    <FormTextArea  name='description' placeholder='Description' />\r\n                    <FormSelectInput options={categoryOptions} placeholder={'Category'} name='category'/>\r\n                    <FormDateInput \r\n                        name='date' \r\n                        placeholderText='Date' \r\n                        showTimeSelect \r\n                        timeCaption='Time'\r\n                        timeFormat=\"H:mm\"\r\n                        dateFormat='MMMM dd, yyyy H:mm'\r\n                    />\r\n                    <Header content='Location Details' sub color='teal'/>\r\n                    <FormTextInput name='city' placeholder='City' />\r\n                    <FormTextInput name='venue' placeholder='Venue' />\r\n                    <Button\r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} \r\n                        floated='right' \r\n                        positive \r\n                        type='submit' \r\n                        content='Submit'/>\r\n                    <Button as={Link} to='/activities' floated='right' type='button' content='Cancel'/>\r\n                </Form>\r\n            )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityForm)\r\n","import React from 'react'\r\nimport { Card, Image } from 'semantic-ui-react'\r\n\r\nconst MyCard = () => {\r\n    return (\r\n        <Card position=\"center\">\r\n        <Image src='/assets/kent2020.jpg' wrapped ui={false} />\r\n        <Card.Content>\r\n          <Card.Header>Kent Jakobsson</Card.Header>\r\n          <Card.Meta>Developer React and C#</Card.Meta>\r\n          <Card.Description>\r\n            My name is Kent Jakobsson from Sweden!\r\n            Student at C# and React.\r\n          </Card.Description>\r\n        </Card.Content>\r\n      </Card>\r\n    )\r\n}\r\n\r\nexport default MyCard\r\n","import React from 'react'\r\nimport { Divider, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nconst WhyComponent = () => {\r\n    return (\r\n            <Segment color='blue'>\r\n          <Header>Why this site<span><Icon name='question circle'/></span></Header>\r\n            <Divider inverted />\r\n                <p>\r\n                    This project is all about learning and master the React typeScript Package. \r\n                    This Site is built upon the princip of \"Clean Architecture pattern\".\r\n                    This means that we bild the site in parts not realted to each part.\r\n                    We have a API C# backend and a typeScript API center whit a TSX(typeScript)\r\n                    frontend react component view.\r\n                </p>\r\n                <Divider inverted />      \r\n                <Header>\r\n                    What is it about<span><Icon name='question circle'/></span>\r\n                </Header>\r\n                <Divider inverted />\r\n                    <p>\r\n                        This project is inspired from a Udemy course.\r\n                        The goal is to learn C# backend API and TS javaScript API and frontend \r\n                        typeScript React. \r\n                    </p>\r\n                    <h5>\r\n                        Project containes\r\n                    </h5>\r\n                    <ul>\r\n                        <li>C#</li>\r\n                        <li>React ver.17 in TS</li>\r\n                        <li>API for backend and fronend</li>\r\n                        <li>Chat SingalR</li>\r\n                        <li>Mobex data</li>\r\n                        <li>Sementic ui</li>\r\n                        <li>Identity</li>\r\n                    </ul>\r\n            </Segment>\r\n    )\r\n}\r\n\r\nexport default WhyComponent\r\n","import { Grid, Image, Segment } from 'semantic-ui-react'\r\nimport MyCard from './MyCard'\r\nimport WhyComponent from './WhyComponent'\r\n\r\nconst AboutPage = () => {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n            <Grid.Column width={4} styles={{align:'center'}}>\r\n                    <MyCard/>\r\n            </Grid.Column>\r\n            <Grid.Column width={12}>\r\n                    <WhyComponent />\r\n            </Grid.Column>\r\n            <Grid.Column width={8}>\r\n            <Image src='/assets/826-8263457_react-with-typescript-react.png' />\r\n            </Grid.Column>\r\n            <Grid.Column width={8}>\r\n            <Image style={{width:'500px', float: 'right'}} src='/assets/4986ee0b20bd65298d2539f3f4efe05f.png' />\r\n            </Grid.Column>\r\n        </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default AboutPage\r\n","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns/esm'\r\n\r\ninterface Props{\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if(activityId){\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                    <Formik \r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                        onSubmit={(values, {resetForm}) => \r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{body: ''}}\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) => (\r\n                            <Form className='ui form' >\r\n                                <Field \r\n                                    name='body'\r\n                                >\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position:'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea \r\n                                                placeholder='Enter your comment (Enter to submitm SHIFT + enter for a new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if(e.key === 'Enter' && e.shiftKey){\r\n                                                        return;\r\n                                                    }\r\n                                                    if(e.key === 'Enter' && !e.shiftKey){\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                                />\r\n                                        </div>\r\n                                        )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.commnets.map(comment => (\r\n                    <Comment key={comment.id}>\r\n                        <Comment.Avatar src={comment.image ||'/assets/user.png'}/>\r\n                        <Comment.Content>\r\n                            <Comment.Author \r\n                                as={Link} \r\n                                to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                            </Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{formatDistanceToNow(comment.createdAt)}</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n                    ))}\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import React, { Fragment } from 'react'\r\nimport { observer } from 'mobx-react-lite';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore()\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                <Label style={{position: 'absolute',zIndex: 1000, left: -14, top: 20}}\r\n                    ribbon color='red' content='Cancelled'></Label>}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy H:mm')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <Fragment>\r\n                        <Button \r\n                            onClick={cancelActivityToggle} \r\n                            loading={loading} \r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                        />\r\n\r\n                        <Button \r\n                            disabled={activity.isCancelled}\r\n                            as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </Fragment>\r\n                    ) : activity.isGoing ? (\r\n                        <Button \r\n                            onClick={updateAttendance} \r\n                            loading={loading}>Cancel attendance\r\n                        </Button>\r\n                    ) : (\r\n                    <Button \r\n                        onClick={updateAttendance} \r\n                        disabled={activity.isCancelled} \r\n                        loading={loading} \r\n                        color='teal'>Join Activity\r\n                    </Button>\r\n                    )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy H:mm')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React, { Fragment } from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if(!attendees){\r\n        return null\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'Peoples'} going.\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                            <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </Fragment>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSideBar from './ActivityDetailedSideBar';\r\n\r\n\r\nconst ActivitiesDetails = () => {\r\n\r\n  const { activityStore } = useStore(); \r\n  const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n  const { id } = useParams<{id: string}>();\r\n\r\n  useEffect(() => {\r\n    if(id) loadActivity(id)\r\n    return () => clearSelectedActivity();\r\n  },[id, loadActivity, clearSelectedActivity])\r\n\r\n  if (loadingInitial || !activity){\r\n    return <LoadingComponent/>;\r\n  }\r\n\r\n    return (\r\n     <Grid>\r\n        <Grid.Column width={10}>\r\n          <ActivityDetailedHeader activity={activity}/>\r\n          <ActivityDetailedInfo activity={activity}/>\r\n          <ActivityDetailedChat activityId={activity.id}/>\r\n        </Grid.Column>\r\n        <Grid.Column width={6} >\r\n          <ActivityDetailedSideBar activity={activity}/>\r\n        </Grid.Column>\r\n     </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivitiesDetails)\r\n","import React from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nconst TestErrors = () => {\r\n\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    const handleNotFound = () => {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleBadRequest = () => {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleServerError = () => {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleUnauthorised = () => {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleBadGuid = () => {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleValidationError = () => {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors}></ValidationErrors>\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default TestErrors\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Oops! - We've loocked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>Return to activities page</Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst ServerError = () => {\r\n    const { commonStore } = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details &&\r\n            <Segment>\r\n                <Header as='h4' content='Stack trace' color='teal' />\r\n                <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n            </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default observer(ServerError)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store'\r\n\r\nconst ModalContainer = () => {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal \r\n            open={modalStore.modal.open} \r\n            onClose={modalStore.closeModal} \r\n            size='mini'>\r\n                <Modal.Content>\r\n                    {modalStore.modal.body}\r\n                </Modal.Content>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(ModalContainer)\r\n","  \r\nimport { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\n// Note: The \"FormTextArea.tsx\" can be misstaken for a sementic ui \r\nimport FormTextInput from \"../../app/common/form/FormTextInput\";\r\nimport FormTextArea from \"../../app/common/form/FormTextArea\"\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <FormTextInput placeholder='Display Name' name='displayName' />\r\n                    <FormTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { useState } from 'react'\r\nimport { Grid, Header, Tab,Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\nconst ProfileAbout = () => {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left'\r\n                        icon='user'   \r\n                        content={`About ${profile?.displayName}`} \r\n                    />\r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                    />)}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                        {   editMode ? <ProfileEditForm \r\n                            setEditMode={setEditMode} \r\n                        /> \r\n                        : \r\n                        <span style={{whiteSpace:'pre-wrap'}}>{profile?.bio}</span>} \r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileAbout)\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react';\r\nimport { UserActivity } from '../../app/models/Profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n   ];\r\n\r\nconst ProfileActivities = () => {\r\n    \r\n    const { profileStore } = useStore();\r\n    const {loadUserActivities,profile,loadingActivities,userActivities} = profileStore;\r\n\r\n    useEffect(() => {\r\n    loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n       number].pane.key);\r\n        };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                    <Grid.Column width={16}>\r\n                        <Tab\r\n                            panes={panes}\r\n                            menu={{ secondary: true, pointing: true }}\r\n                            onTabChange={(e, data) => handleTabChange(e, data)}\r\n                        />\r\n                        <br />\r\n                        <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                        <Card\r\n                            as={Link}\r\n                            to={`/activities/${activity.id}`}\r\n                            key={activity.id}\r\n                        >\r\n                        <Image\r\n                            src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                            style={{ minHeight: 100, objectFit:\r\n                            'cover' }}\r\n                        />\r\n                        <Card.Content>\r\n                        <Card.Header\r\n                             textAlign='center'>{activity.title}</Card.Header>\r\n                                <Card.Meta textAlign='center'>\r\n                                    <div>{format(new Date(activity.date),\r\n                                    'do LLL')}</div>\r\n                                    <div>{format(new Date(activity.date),\r\n                                    'h:mm a')}</div>\r\n                                </Card.Meta>\r\n                        </Card.Content>\r\n                    </Card>\r\n                    ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileActivities)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { Fragment } from 'react'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nconst ProfileFollowings = () => {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Tab.Pane loading={loadingFollowings}>\r\n                <Grid>\r\n                    <Grid.Column width={16}>\r\n                        <Header \r\n                            floated='left' \r\n                            icon='user' \r\n                    content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={16}>\r\n                        <Card.Group itemsPerRow={4}>\r\n                            {followings.map(profile => (\r\n                                <ProfileCard key={profile.username} profile={profile} />))}\r\n                        </Card.Group>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Tab.Pane>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileFollowings)\r\n","import React from 'react'\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props{\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nconst PhotoWidgetCropper = ({imagePreview, setCropper} : Props) => {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetCropper\r\n","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props{\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nconst PhotoWidgetDropzone = ({setFiles}: Props) => {\r\n    const dzStyles = {\r\n        border: 'dashed 3pc #eee',\r\n        borderRadius: '5px',\r\n        borderColor: '#eee',\r\n        paddingTop: '30px',\r\n        boxShadow: '2px, 2px, 5px black',\r\n        textAlign: 'center' as 'center',\r\n        height: '200'\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n        <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge'/>\r\n        <Header content='Drop image here'/>    \r\n    </div>\r\n  )\r\n} \r\n\r\nexport default PhotoWidgetDropzone","import { observer } from 'mobx-react-lite'\r\nimport React, { Fragment, useEffect, useState } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper'\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file:Blob) => void;\r\n}\r\n\r\nconst PhotoUploadWidget = ({loading, uploadPhoto} : Props) => {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    const onCrop = () => {\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper \r\n                        setCropper={setCropper} \r\n                        imagePreview={files[0].preview}/>\r\n                    )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 && \r\n                <Fragment>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check'/>\r\n                        <Button disable={loading} onClick={() => setFiles([])} icon='close'/>\r\n                    </Button.Group>\r\n                </Fragment>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(PhotoUploadWidget)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react'\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\r\nimport { Photo, Profile } from '../../app/models/Profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nconst ProfilePhotos = ({profile}: Props) => {\r\n    const {profileStore: {isCurrentUser, uploadPhoto, \r\n     setMainPhoto, loading ,deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    // State to determ if we have that photo\r\n    const [target, setTarget] = useState('');\r\n\r\n    // Function that handles the file of type Blob and uploads it.\r\n    const handlePhotoUpload = (file: Blob) =>{\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false))\r\n    }\r\n\r\n    // Sets the main photo..\r\n    const handleSetMainPhoto = \r\n    (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    // Deletes one specific photo thrue but event click that is not the main.\r\n    const handleDeletePhoto = \r\n    (photo: Photo,  e: SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photo' />\r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floated='right' \r\n                            basic \r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )} \r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={loading}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button \r\n                                                    basic \r\n                                                    color='green'\r\n                                                    content='Main' \r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='red'\r\n                                                    icon='trash' \r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                    disabled={photo.isMain}\r\n                                                    name={photo.id}\r\n                                                />\r\n                                            </Button.Group>)}\r\n                                    </Card>\r\n                                ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePhotos)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/Profile'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileActivities from './ProfileActivities'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfilePhotos from './ProfilePhotos'\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nconst ProfileContent = ({profile} : Props) => {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ]\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e,data) => profileStore.setActiveTab(data.activeIndex)}>\r\n        </Tab>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileContent)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/Profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nconst ProfileHeader = ({profile}: Props) => {\r\n    \r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column widescreen={4}>\r\n                    <Statistic.Group>\r\n                        <Statistic label='Followers' value={profile.followersCount}/>\r\n                        <Statistic label='Following' value={profile.followingCount}/>\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileHeader)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nconst ProfilePage = () => {\r\n    const {username} = useParams<{username: string}>();\r\n    const { profileStore } = useStore();\r\n    const {loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return(() => {\r\n            setActiveTab(0);\r\n        })\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if(loadingProfile){\r\n        return <LoadingComponent content='Loading profile...' />\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && \r\n                <ProfileHeader profile={profile}/>}\r\n                {profile &&\r\n                <ProfileContent profile={profile}/>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePage)\r\n","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { Fragment, useEffect } from 'react';\n// Axios API fetcher.\n// It is a type of component bootstrap\nimport { Container } from 'semantic-ui-react';\n// interface of a Activity whit a array\nimport Navbar from './Navbar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\n\n// uuid is a package that helps us create a unic id for our activtys.\n// It is sent dont in createOrEditActivityHandler\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/Home/HomePage';\nimport ActivityForm from '../../features/activities/Form/ActivityForm';\nimport AboutPage from '../../features/About/AboutPage';\nimport ActivitiesDetails from '../../features/activities/Details/ActivitiesDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport profilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\n\nconst App = () => {\n\n  // To restart the initial parameters when in editing, and whnat to create a \n  // new activity.\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if(commonStore.token){\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    }else{\n      commonStore.setAppLoaded();\n    }\n  },[commonStore, userStore])\n\n  // Loadingflag. \"Load this before rendering and returning the App component\"\n  if(!commonStore.appLoaded){\n    return <LoadingComponent content='\"Imonit\" to loading the app...'/>\n  }\n\n  // When using the <Switch> we can exclude all the conent not in use.\n  // So, when a bad link is opend we routes to the NotFound. \n  // Or.. if we click NotFoudn button we execute that byggyrepport.\n  return (\n    <Fragment>\n      <ToastContainer position={'bottom-right'} hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route \n        path={'/(.+)'} \n        render={() =>( \n          <>  \n        <Navbar/>\n        <Container style={{marginTop: '10em'}}>\n          <Switch>\n          <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n          <PrivateRoute path='/activities/:id' component={ActivitiesDetails} />\n          <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n          <Route path='/about' component={AboutPage} />\n          <PrivateRoute path='/profiles/:username' component={profilePage}/>\n          <PrivateRoute path='/errors' component={TestErrors} />\n          <Route path='/server-error' component={ServerError}/>\n          <Route component={NotFound} />\n          </Switch>\n        </Container>\n        </>\n        )}\n        />\n    </Fragment>\n  );\n}\n\n// Observe from MobX lite helps us to observe some changes in store.\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n// Global css for all styling.\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTopp';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n    <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}